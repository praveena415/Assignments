<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Meme Explorer App</title>
  <script crossorigin src="https://cdn.jsdelivr.net/npm/react@18/umd/react.development.js"></script>
  <script crossorigin src="https://cdn.jsdelivr.net/npm/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/axios@1.6.7/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone/babel.min.js"></script>
  <style>
    button {
      color: white;
      padding: 10px;
      margin: 5px;
      border-radius: 10px;
      background-color: grey;
      font-weight: bold;
    }
    input, select {
      border-radius: 20px;
      text-align: center;
      padding: 5px;
    }
  </style>
</head>
<body>
  <div id="root">this is dom heading</div>

  <script type="text/babel">
    let root = ReactDOM.createRoot(document.getElementById("root"));

    function App() {
      const { useState } = React;
      const [data, setData] = useState([]);
      const [loading, setLoading] = useState(false);
      const [error, setError] = useState(null);
      const [message, setMessage] = useState(false);
      const [search, setSearch] = useState("");
      const [sortValue, setSort] = useState("");
      const [filter, setFilter] = useState("");
      const [theme, setTheme] = useState(localStorage.getItem("theme") || "light");

      async function fetchData() {
        setLoading(true);
        setMessage(false);
        try {
          let res = await axios.get("https://api.imgflip.com/get_memes");
          setData(res.data.data.memes);
          setLoading(false);
          setError(null);
        } catch (err) {
          setLoading(false);
          setError(err.message);
        }
      }

      function clearAll() {
        setData([]);
        setMessage("All cleared! Freshly fetch the data.");
      }

      function resetAll() {
        setSearch("");
        setSort("");
        setFilter("");
      }

      function handleChange(e) {
        const newTheme = e.target.value;
        setTheme(newTheme);
        localStorage.setItem("theme", newTheme);
      }

      let processedData = [...data];

      if (search.trim() !== "") {
        processedData = processedData.filter(item =>
          item.name.toLowerCase().includes(search.toLowerCase())
        );
      }

      if (filter === "width-500") {
        processedData = processedData.filter(item => item.width > 500);
      } else if (filter === "height-500") {
        processedData = processedData.filter(item => item.height > 500);
      }

      if (sortValue === "name-asc") {
        processedData.sort((a, b) => a.name.localeCompare(b.name));
      } else if (sortValue === "name-dsc") {
        processedData.sort((a, b) => b.name.localeCompare(a.name));
      } else if (sortValue === "width-asc") {
        processedData.sort((a, b) => a.width - b.width);
      } else if (sortValue === "width-dsc") {
        processedData.sort((a, b) => b.width - a.width);
      }

      return (
        <div
          style={{
            backgroundColor: theme === "light" ? "white" : "black",
            color: theme === "light" ? "black" : "white",
            minHeight: "100vh",
            paddingBottom: "30px"
          }}
        >
          <h1 style={{ textAlign: "center", color: "orange" }}>
            Welcome to Meme Explorer App
          </h1>

          <div
            style={{
              display: "flex",
              flexWrap: "wrap",
              justifyContent: "center",
              gap: "10px",
              padding: "20px",
              backgroundColor: "brown",
              width: "90%",
              margin: "auto",
              borderRadius: "10px"
            }}
          >
            <select name="theme" value={theme} onChange={handleChange}>
              <option value="light">Light</option>
              <option value="dark">Dark</option>
            </select>

            <button onClick={fetchData}>Load Products</button>
            <button onClick={clearAll}>Clear All</button>

            <input
              type="text"
              name="search"
              value={search}
              placeholder="Search for a meme"
              onChange={(e) => setSearch(e.target.value)}
            />

            <select name="sort" value={sortValue} onChange={(e) => setSort(e.target.value)}>
              <option value="">Sort By</option>
              <option value="name-asc">Names in ASC</option>
              <option value="name-dsc">Names in DSC</option>
              <option value="width-asc">Width ASC</option>
              <option value="width-dsc">Width DSC</option>
            </select>

            <select name="filter" value={filter} onChange={(e) => setFilter(e.target.value)}>
              <option value="">Filter By</option>
              <option value="width-500">Width: Above 500</option>
              <option value="height-500">Height: Above 500</option>
            </select>

            <button onClick={resetAll}>Reset</button>
          </div>

          {loading && <p style={{ textAlign: "center", color: "blue" }}>Loading......</p>}
          {error && <p style={{ textAlign: "center", color: "red" }}>{error}</p>}
          {message && <p style={{ textAlign: "center", color: "orange" }}>{message}</p>}

          <div
            style={{
              width: "90%",
              margin: "auto",
              display: "grid",
              gridTemplateColumns: "repeat(auto-fill, minmax(200px, 1fr))",
              gap: "20px",
              marginTop: "20px"
            }}
          >
            {processedData.length === 0 ? (
              <p style={{ textAlign: "center", gridColumn: "1/-1" }}>No Memes Found</p>
            ) : (
              processedData.map((item) => (
                <div
                  key={item.id}
                  style={{
                    display: "flex",
                    flexDirection: "column",
                    justifyContent: "center",
                    alignItems: "center",
                    padding: "10px",
                    borderRadius: "10px",
                    boxShadow: "rgba(0, 0, 0, 0.35) 0px 5px 15px",
                    backgroundColor: theme === "light" ? "#f0f0f0" : "#1a1a1a"
                  }}
                >
                  <img
                    style={{ width: "100%", height: "200px", objectFit: "contain" }}
                    src={item.url}
                    alt={item.name}
                  />
                  <h3>Title: {item.name}</h3>
                </div>
              ))
            )}
          </div>
        </div>
      );
    }

    root.render(<App />);
  </script>
</body>
</html>
