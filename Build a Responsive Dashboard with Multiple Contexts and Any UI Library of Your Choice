import React, { createContext, useContext, useState } from 'react';
import {
  ChakraProvider,
  Box,
  Flex,
  Grid,
  Text,
  Button,
  VStack,
  useMediaQuery,
  extendTheme,
} from '@chakra-ui/react';

const AuthContext = createContext();
const ThemeContext = createContext();

const AuthProvider = ({ children }) => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const toggleAuth = () => setIsLoggedIn((prev) => !prev);
  return (
    <AuthContext.Provider value={{ isLoggedIn, toggleAuth }}>
      {children}
    </AuthContext.Provider>
  );
};

const ThemeProviderCustom = ({ children }) => {
  const [theme, setTheme] = useState('light');
  const toggleTheme = () =>
    setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));
  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

const Dashboard = () => {
  const { isLoggedIn, toggleAuth } = useContext(AuthContext);
  const { theme, toggleTheme } = useContext(ThemeContext);
  const [isLargerThan768] = useMediaQuery('(min-width: 768px)');

  const bg = theme === 'light' ? 'gray.100' : 'gray.800';
  const text = theme === 'light' ? 'black' : 'white';
  const cardBg = theme === 'light' ? 'white' : 'gray.700';
  const footerBg = theme === 'light' ? 'gray.300' : 'gray.900';

  return (
    <Box minH="100vh" bg={bg} color={text}>
      <Flex p="4" justify="space-between" bg={bg} shadow="md">
        <Text>{isLoggedIn ? 'Logged In' : 'Logged Out'}</Text>
        <Flex gap="4">
          <Button size="sm" onClick={toggleAuth}>
            {isLoggedIn ? 'Logout' : 'Login'}
          </Button>
          <Button size="sm" onClick={toggleTheme}>
            Toggle Theme
          </Button>
        </Flex>
      </Flex>

      <Flex direction={{ base: 'column', md: 'row' }} flex="1">
        {isLargerThan768 && (
          <Box w="250px" p="4" bg={theme === 'light' ? 'gray.200' : 'gray.700'}>
            <Text fontWeight="bold">Sidebar</Text>
            {isLoggedIn && <Text mt="2">Welcome, User</Text>}
          </Box>
        )}

        <Box flex="1" p="4">
          <Grid templateColumns={{ base: '1fr', md: 'repeat(2, 1fr)', lg: 'repeat(3, 1fr)' }} gap="4">
            {['Product 1', 'Product 2', 'Product 3', 'Product 4', 'Product 5'].map((item) => (
              <Box key={item} p="6" bg={cardBg} rounded="md" shadow="sm">
                {item}
              </Box>
            ))}
          </Grid>
        </Box>
      </Flex>

      <Box as="footer" p="4" bg={footerBg} textAlign="center" mt="auto">
        Footer Content
      </Box>
    </Box>
  );
};

const App = () => (
  <ChakraProvider
    theme={extendTheme({ config: { initialColorMode: 'light', useSystemColorMode: false } })}
  >
    <AuthProvider>
      <ThemeProviderCustom>
        <Dashboard />
      </ThemeProviderCustom>
    </AuthProvider>
  </ChakraProvider>
);

export default App;
